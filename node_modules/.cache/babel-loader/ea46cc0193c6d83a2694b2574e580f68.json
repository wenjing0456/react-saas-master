{"ast":null,"code":"import axios from 'axios';\nimport qs from 'qs';\nlet baseURL = window.location.origin;\nlet api = '/cardapi';\nexport default function fetch(opt) {\n  let ContentType = 'application/json;charset=UTF-8';\n\n  if (opt.ContentType === 'form') {\n    ContentType = 'application/x-www-form-urlencoded';\n  } else if (opt.ContentType === 'form-data') {\n    ContentType = 'multipart/form-data';\n  }\n\n  var dataList = {\n    method: opt.method,\n    url: \"\".concat(api).concat(opt.url),\n    baseURL,\n    headers: {\n      'Content-Type': ContentType,\n      'token': localStorage.token\n    },\n    withCredentials: true\n  };\n\n  if (['post', 'put'].includes(opt.method)) {\n    opt.ContentType === 'form' ? dataList.data = qs.stringify(opt.data) : dataList.data = opt.data;\n  } else {\n    // 防止缓存\n    if (opt.data) {\n      opt.data.r = new Date().getTime() + Math.random();\n      dataList.params = opt.data;\n    } else {\n      dataList.params = {\n        r: new Date().getTime() + Math.random()\n      };\n    }\n  }\n\n  return new Promise((resolve, reject) => {\n    axios(dataList).then(res => {\n      // commonFun(res.data)\n      resolve(res.data);\n    }).catch(error => {\n      reject(error.data);\n    });\n  });\n} // 发送请求前处理数据\n\naxios.interceptors.request.use(config => {\n  // Indicator.open();\n  return config;\n}, error => {\n  // Indicator.close();\n  return Promise.reject(error);\n}); // 返回响应请求后处理数据\n\naxios.interceptors.response.use(res => {\n  // Indicator.close();\n  return res;\n}, error => {\n  // Indicator.close();\n  let errorCode = error.response.status;\n\n  if (errorCode === 401) {\n    utils.$go('login');\n  } else if ([405, 500, 503, 504].includes(errorCode)) {\n    error.response.data = {\n      msg: '网络错误,请稍后重试!'\n    };\n  }\n\n  return Promise.reject(error.response);\n});","map":{"version":3,"sources":["/Users/wenjing/Documents/testPro/reactTest/react-saas-master/src/utils/fetch.js"],"names":["axios","qs","baseURL","window","location","origin","api","fetch","opt","ContentType","dataList","method","url","headers","localStorage","token","withCredentials","includes","data","stringify","r","Date","getTime","Math","random","params","Promise","resolve","reject","then","res","catch","error","interceptors","request","use","config","response","errorCode","status","utils","$go","msg"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport qs from 'qs'\n\nlet baseURL = window.location.origin;\nlet api = '/cardapi'\n\nexport default function fetch(opt){\n    let ContentType = 'application/json;charset=UTF-8';\n    if (opt.ContentType === 'form') {\n        ContentType = 'application/x-www-form-urlencoded';\n    } else if (opt.ContentType === 'form-data') {\n        ContentType = 'multipart/form-data';\n    }\n    var dataList = {\n        method: opt.method,\n        url: `${api}${opt.url}`,\n        baseURL,\n        headers: {\n            'Content-Type': ContentType,\n            'token': localStorage.token\n        },\n        withCredentials: true\n    }\n    if (['post', 'put'].includes(opt.method)) {\n        opt.ContentType === 'form' ? dataList.data = qs.stringify(opt.data) : dataList.data = opt.data;\n    } else {\n        // 防止缓存\n        if (opt.data) {\n            opt.data.r = new Date().getTime() + Math.random()\n            dataList.params = opt.data;\n        } else {\n            dataList.params = { r: new Date().getTime() + Math.random()}\n        }\n    }\n    return new Promise((resolve, reject) => {\n        axios(dataList)\n            .then(res => {\n                // commonFun(res.data)\n                resolve(res.data)\n            })\n            .catch(error => {\n                reject(error.data)\n            })\n    })\n}\n// 发送请求前处理数据\naxios.interceptors.request.use(config => {\n  // Indicator.open();\n  return config;\n}, error => {\n  // Indicator.close();\n  return Promise.reject(error);\n});\n\n// 返回响应请求后处理数据\naxios.interceptors.response.use(res => {\n  // Indicator.close();\n  return res;\n}, error => {\n  // Indicator.close();\n  let errorCode = error.response.status;\n  if (errorCode === 401) {\n      utils.$go('login');\n  } else if ([405, 500, 503, 504].includes(errorCode)) {\n      error.response.data = {\n          msg: '网络错误,请稍后重试!'\n      };\n  }\n  return Promise.reject(error.response)\n});\n"]},"metadata":{},"sourceType":"module"}